{"version":3,"sources":["Container.module.scss","CovidChart.module.scss","Container.js","CovidHeader.js","CovidChart.js","CountrySelector.js","App.js","serviceWorker.js","index.js","CountrySelector.module.scss","CovidHeader.module.scss"],"names":["module","exports","children","className","containerStyles","container","CovidHeader","covidHeaderStyles","covidHeader","subtitle","author","href","CovidChart","countries","query","useState","items","setItems","noResults","setNoResults","selected","find","country","i","Slug","useEffect","window","scrollTo","fetch","method","redirect","then","res","json","result","length","fromDayOne","filter","elem","Confirmed","map","d","active","Recovered","Deaths","parsedDate","Date","parse","formattedDate","Intl","DateTimeFormat","year","month","day","format","confirmed","deaths","recovered","catch","error","console","log","covidChartStyles","covidChart","header","Country","firstCase","firstDate","chart","width","height","data","margin","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","style","fontSize","stroke","strokeDasharray","itemStyle","color","wrapperStyle","backgroundColor","contentStyle","border","backgroundImage","labelStyle","marginBottom","verticalAlign","type","name","strokeWidth","dot","fill","CountrySelector","setQuery","initialCountries","showInitialCountries","setshowInitialCountries","CountryButton","props","onClick","item","CountrySelectorStyles","Fragment","list","includes","key","fixed","App","useQueryParams","withDefault","StringParam","setCountries","from","sortedCountries","sort","a","b","localeCompare","Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ReactRouterRoute","Route","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3141978d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__lIfwH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"covidChart\":\"CovidChart_covidChart__27iF-\",\"header\":\"CovidChart_header__2ts0u\",\"container\":\"CovidChart_container__2cLr2\",\"country\":\"CovidChart_country__1_UeB\",\"firstCase\":\"CovidChart_firstCase__DzFJX\",\"firstDate\":\"CovidChart_firstDate__21qJ-\",\"noResults\":\"CovidChart_noResults__3rZOp\"};","import React from \"react\"\nimport containerStyles from \"./Container.module.scss\"\n\nexport default ({ children }) => (\n  <div className={containerStyles.container}>{children}</div>\n)\n","import React from \"react\"\nimport covidHeaderStyles from \"./CovidHeader.module.scss\"\n\nfunction CovidHeader() {\n  return (\n    <div className={covidHeaderStyles.covidHeader}>\n      <h1>Normalized COVID-19 evolution by country</h1>\n      <p className={covidHeaderStyles.subtitle}>\n        Normalized COVID-19 progress over time,\n        substracting recovered and death cases from confirmed cases.\n      </p>\n      <div className={covidHeaderStyles.author}>\n        <p>\n          Built by <a href=\"https://marcelomazza.com.ar/\">Marce</a> with <a href=\"https://reactjs.org/\">React</a> & <a href=\"https://covid19api.com/\">covid19api.com</a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default CovidHeader;\n","import React, { useState, useEffect } from 'react';\nimport { ResponsiveContainer, AreaChart, Area, CartesianGrid, Legend, XAxis, YAxis, Tooltip } from 'recharts';\nimport covidChartStyles from \"./CovidChart.module.scss\"\n\nfunction CovidChart({ countries, query }) {\n  const [items, setItems] = useState([]);\n  const [noResults, setNoResults] = useState(false);\n  const selected = countries.find((country, i) => country.Slug == query.country);\n\n  const legendStyle = {\n    right: 0,\n    fontSize: '11px',\n    color: '#A9ACB3',\n  }\n\n  const itemStyle = {\n    color: 'white',\n    fontSize: '0.8rem',\n  }\n\n  const wrapperStyle = {\n    backgroundColor: 'transparent',\n  }\n\n  const contentStyle = {\n    border: '0',\n    backgroundColor: 'transparent',\n    backgroundImage: 'linear-gradient(rgba(71, 84, 113, 0.8), rgba(48, 57, 76, 0.8))',\n  }\n\n  const labelStyle = {\n    marginBottom: '0.75rem',\n  }\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    setNoResults(false);\n\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow',\n    };\n\n    fetch(\"https://api.covid19api.com/total/country/\" + query.country, requestOptions)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.length === 0) {\n            setNoResults(true);\n          }\n\n          // Discard dates without any cases\n          const fromDayOne = result.filter((elem) => elem.Confirmed > 0);\n          setItems(fromDayOne.map(function(d, i) {\n            const active = d.Confirmed - d.Recovered - d.Deaths;\n            const parsedDate = Date.parse(d.Date);\n            const formattedDate = new Intl.DateTimeFormat(\"en-GB\", {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"numeric\"\n            }).format(parsedDate);\n\n            return {\n              formattedDate: formattedDate,\n              active: active,\n              confirmed: d.Confirmed,\n              deaths: d.Deaths,\n              recovered: d.Recovered,\n            };\n          }));\n        }\n    ).catch(\n      (error) => {\n        console.log(error)\n      }\n    )\n  }, [query]);\n\n  return (\n    <div className={covidChartStyles.covidChart}>\n      <div className={covidChartStyles.header}>\n        <h3 className={covidChartStyles.country}>\n          { selected ? (\n            selected.Country\n          ) : null\n          }\n        </h3>\n        <h4 className={covidChartStyles.firstCase}>\n          First case:\n          <span className={covidChartStyles.firstDate}>\n            {items[0] ? items[0].formattedDate : ''}\n          </span>\n        </h4>\n      </div>\n      {noResults ? (\n        <div className={covidChartStyles.noResults}>\n          Sorry, no results for {selected.Country}\n        </div>\n      ) : null}\n      <div className={covidChartStyles.container}>\n        <ResponsiveContainer className={covidChartStyles.chart} width=\"100%\" height=\"100%\">\n          <AreaChart data={items} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n            <defs>\n              <linearGradient id=\"activeGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#21FF9F\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"#21FF9F\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <XAxis dataKey=\"formattedDate\" style={{fontSize: '11px'}} />\n            <YAxis style={{fontSize: '11px'}} />\n            <CartesianGrid stroke=\"#30394C\" strokeDasharray=\"5 5\" />\n            <Tooltip itemStyle={itemStyle} wrapperStyle={wrapperStyle} contentStyle={contentStyle} labelStyle={labelStyle}/>\n            <Legend verticalAlign=\"top\" height={36} wrapperStyle={legendStyle} />\n            <Area type=\"basis\" dataKey=\"confirmed\" name=\"Confirmed\" stroke=\"#30394C\" strokeWidth={2} dot={false} fill=\"none\" />\n            <Area type=\"basis\" dataKey=\"deaths\" name=\"Deaths\" stroke=\"#742A1B\" strokeWidth={2} dot={false} fill=\"none\" />\n            <Area type=\"basis\" dataKey=\"recovered\" name=\"Recovered\" stroke=\"#1B5F5B\" strokeWidth={2} dot={false} fill=\"none\" />\n            <Area type=\"basis\" dataKey=\"active\" name=\"Active Cases\" stroke=\"#21FF9F\" strokeWidth={2} dot={false} fill=\"url(#activeGradient)\" />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default CovidChart;\n","import React, { useState } from 'react';\nimport CountrySelectorStyles from \"./CountrySelector.module.scss\"\n\nfunction CountrySelector({ countries, query, setQuery }) {\n  const initialCountries = [\n    'argentina',\n    'brazil',\n    'chile',\n    'china',\n    'france',\n    'italy',\n    'spain',\n    'united-states',\n    'united-kingdom',\n    'uruguay'\n  ];\n\n  const [showInitialCountries, setshowInitialCountries] = useState(true);\n\n  function CountryButton(props) {\n    return (\n      <li>\n        <button\n          onClick={() => setQuery({ country: props.item.Slug })}\n          className={props.item.Slug === query.country ? CountrySelectorStyles.active : ''}>\n          {props.item.Country}\n        </button>\n      </li>\n    );\n  }\n\n  return (\n    <div className={CountrySelectorStyles.container}>\n      {query ? (\n        <React.Fragment>\n          <ul className={CountrySelectorStyles.list}>\n            {showInitialCountries ? (\n              countries.filter(country => initialCountries.includes(country.Slug)).map((item, i) => (\n                <CountryButton key={i} item={item} />\n              ))\n            ) : (\n              countries.map((item, i) => (\n                <CountryButton key={i} item={item} />\n              ))\n            )}\n          </ul>\n          <div className={CountrySelectorStyles.fixed}>\n            <button\n              onClick={() => setshowInitialCountries(!showInitialCountries)}>\n                {showInitialCountries ? (\n                  'Show all countries'\n                ) : (\n                  'Show less'\n                )}\n            </button>\n          </div>\n        </React.Fragment>\n      ) : null}\n    </div>\n  );\n}\n\nexport default CountrySelector;\n","import React, { useState, useEffect } from 'react';\nimport { useQueryParams, StringParam, withDefault } from 'use-query-params';\nimport \"./App.scss\"\nimport Container from \"./Container\"\nimport CovidHeader from './CovidHeader';\nimport CovidChart from './CovidChart';\nimport CountrySelector from './CountrySelector';\n\nfunction App() {\n  const [query, setQuery] = useQueryParams({\n    country: withDefault(StringParam, 'china')\n  });\n\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow',\n      from: '2020-03-01T00:00:00Z',\n    };\n\n    fetch(\"https://api.covid19api.com/countries\", requestOptions)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const sortedCountries = result.sort((a, b) => a.Country.localeCompare(b.Country));\n          setCountries(sortedCountries);\n        }\n      ).catch(\n        (error) => {\n          console.log(error)\n        }\n      );\n\n  }, []);\n\n\n  return (\n    <Container>\n      <CovidHeader />\n      <CovidChart countries={countries} query={query} />\n      <CountrySelector countries={countries} query={query} setQuery={setQuery} style={{ 'flexShrink': 1 }}/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <App />\n      </QueryParamProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountrySelector_container__LiXDc\",\"list\":\"CountrySelector_list__2mW3C\",\"active\":\"CountrySelector_active__7AXJ-\",\"fixed\":\"CountrySelector_fixed__1L3Dr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"covidHeader\":\"CovidHeader_covidHeader__1_bwK\",\"subtitle\":\"CovidHeader_subtitle__Zxeiq\",\"author\":\"CovidHeader_author__29dSG\"};"],"sourceRoot":""}